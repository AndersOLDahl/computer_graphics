/***********************************************************

	Eat 3D - Shader Production DVD 

	This shader is a continuation of our lighting models. It has everything that we want to do
	lighting wise, but still has no textures.

	- Luiz

**************************************************************/

//////////////////////////////////////////////////////////////
// CGFX Matrices Section
float4x4 WorldViewProjection     : WorldViewProjection   < string UIWidget = "None"; >;
float4x4 WorldInverseTranspose   : WorldInverseTranspose < string UIWidget = "None"; >;
float4x4 ViewInverse             : ViewInverse           < string UIWidget = "None"; >;
float4x4 World                   : World                 < string UIWidget = "None"; >;

// Maya Description
string description = "Phong, fresnel, diffuse, ambient";

//////////////////////////////////////////////////////////////
// Parameters section

// Shader color variable
float3 shaderColor : Diffuse
<
	string UIName = "Shader Color";
> = {1.0f, 1.0f, 1.0f};

// Light direction variable
float3 lightDirection : Direction
<
	string UIName = "Light Direction";
> = {0.0f, 1.0f, 0.0f};

// Ambient color variable
float3 ambientColor : Diffuse
<
	string UIName = "Ambient Color";
> = {0.15f, 0.15f, 0.15f};

// Fresnel power variable
float fresnelPower
<
	string UIWidget = "slider";
	string UIName = "Fresnel Power";
	float UIMin = 0.0f;
	float UIMax = 10.0f;
	float UIStep = 0.01f;

> = 3.0f;

// Specular power variable
float specularPower
<
	string UIWidget = "slider";
	string UIName = "Specular Power";
	float UIMin = 0.1f;
	float UIMax = 100.0f;
	float UIStep = 0.01f;

> = 30.0f;

// Specular color variable
float3 specularColor : Diffuse
<
	string UIName = "Specular Color";
> = {1.0f, 1.0f, 1.0f};

//////////////////////////////////////////////////////////////
// Structs section
// input from application
struct a2v {
	float4 position  : POSITION;
	float4 normal    : NORMAL;
};

// output to fragment program
struct v2f {
        float4 position        : POSITION;
		float3 worldNormal     : TEXCOORD0;
		float3 eyeVector 	   : TEXCOORD1;
};



//////////////////////////////////////////////////////////////
// Vertex Shader
v2f vShader(a2v In)
{
    v2f Out;
    Out.position = mul(WorldViewProjection, In.position);
	Out.worldNormal = mul(WorldInverseTranspose, In.normal).xyz;

	float3 worldSpacePos = mul(World, In.position);
	float3 worldCameraPos = float3(ViewInverse[0].w, ViewInverse[1].w, ViewInverse[2].w);
	Out.eyeVector = worldCameraPos - worldSpacePos;

    return Out;
}

//////////////////////////////////////////////////////////////
// Pixel Shader
float4 pShader(v2f In) : COLOR
{
	float4 outColor;

	// Setup worldNormal, lightDir, and eyeVector
	// based on what we got as an input from the
	// program running the cgfx shader.
	float3 worldNormal = normalize(In.worldNormal);
	float3 lightDir = normalize(-lightDirection);
	float3 eyeVector = normalize(In.eyeVector);

	// Reflect the eye vector off of the worldNormal. This sets up
	// reflected light in the shader.
	float3 reflectionVector = - reflect(eyeVector, worldNormal);

	// Setup specular, lambert, and fresnel effects
	float3 specular = pow(saturate(dot(reflectionVector, lightDir)), specularPower) * specularColor;
	float3 lambert = saturate(dot(lightDir, worldNormal));
	float3 fresnel = pow(1- saturate(dot(eyeVector, worldNormal)), fresnelPower) * (lambert + ambientColor);

	// Output the color of the pixel when all affects have been applied.
	outColor.rgb = (lambert + ambientColor) * shaderColor + fresnel + specular;
	outColor.a = 1.0f;
	return outColor;
}

//////////////////////////////////////////////////////////////
// Techniques
// Compile the Pixel and Vertex shaders.
technique Simple
{
    pass one
    {
		VertexShader = compile vp30 vShader();
		PixelShader = compile fp30 pShader();
    }
}
